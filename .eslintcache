[{"E:\\understand_project_code\\react-social\\client\\src\\index.js":"1","E:\\understand_project_code\\react-social\\client\\src\\App.js":"2","E:\\understand_project_code\\react-social\\client\\src\\redux\\store.js":"3","E:\\understand_project_code\\react-social\\client\\src\\redux\\root.reducer.js":"4","E:\\understand_project_code\\react-social\\client\\src\\redux\\users\\user.action.js":"5","E:\\understand_project_code\\react-social\\client\\src\\layout\\navbar\\Navbar.js":"6","E:\\understand_project_code\\react-social\\client\\src\\layout\\home\\Home.js":"7","E:\\understand_project_code\\react-social\\client\\src\\layout\\misc\\alert\\Alert.js":"8","E:\\understand_project_code\\react-social\\client\\src\\modules\\users\\user-register\\UserRegister.js":"9","E:\\understand_project_code\\react-social\\client\\src\\modules\\developers\\developer-list\\DeveloperList.js":"10","E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\dashboard\\Dashboard.js":"11","E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\create-profile\\CreateProfile.js":"12","E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\add-education\\AddEducation.js":"13","E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\edit-profile\\EditProfile.js":"14","E:\\understand_project_code\\react-social\\client\\src\\modules\\developers\\developer-details\\DeveloperDetails.js":"15","E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\add-experience\\AddExperience.js":"16","E:\\understand_project_code\\react-social\\client\\src\\modules\\posts\\post-list\\PostList.js":"17","E:\\understand_project_code\\react-social\\client\\src\\modules\\users\\user-login\\UserLogin.js":"18","E:\\understand_project_code\\react-social\\client\\src\\modules\\posts\\post-details\\PostDetails.js":"19","E:\\understand_project_code\\react-social\\client\\src\\redux\\users\\userReducer.js":"20","E:\\understand_project_code\\react-social\\client\\src\\redux\\developers\\developer.reducer.js":"21","E:\\understand_project_code\\react-social\\client\\src\\util\\userUtil.js":"22","E:\\understand_project_code\\react-social\\client\\src\\redux\\alert\\alert.reducer.js":"23","E:\\understand_project_code\\react-social\\client\\src\\redux\\developers\\developer.actions.js":"24","E:\\understand_project_code\\react-social\\client\\src\\redux\\profiles\\profile.action.js":"25","E:\\understand_project_code\\react-social\\client\\src\\redux\\alert\\alert.action.js":"26","E:\\understand_project_code\\react-social\\client\\src\\redux\\posts\\post.actions.js":"27","E:\\understand_project_code\\react-social\\client\\src\\util\\authUtil.js":"28","E:\\understand_project_code\\react-social\\client\\src\\redux\\posts\\post.reducer.js":"29","E:\\understand_project_code\\react-social\\client\\src\\redux\\profiles\\profile.reducer.js":"30","E:\\understand_project_code\\react-social\\client\\src\\layout\\misc\\spinner\\Spinner.js":"31"},{"size":1063,"mtime":1650655062877,"results":"32","hashOfConfig":"33"},{"size":3277,"mtime":1650967315127,"results":"34","hashOfConfig":"33"},{"size":509,"mtime":1650656172177,"results":"35","hashOfConfig":"33"},{"size":1175,"mtime":1650665154447,"results":"36","hashOfConfig":"33"},{"size":4493,"mtime":1650354419994,"results":"37","hashOfConfig":"33"},{"size":4122,"mtime":1650560845357,"results":"38","hashOfConfig":"33"},{"size":1242,"mtime":1649253626233,"results":"39","hashOfConfig":"33"},{"size":1227,"mtime":1649753586362,"results":"40","hashOfConfig":"33"},{"size":6051,"mtime":1649752164296,"results":"41","hashOfConfig":"33"},{"size":5694,"mtime":1651112222944,"results":"42","hashOfConfig":"33"},{"size":10162,"mtime":1651777966917,"results":"43","hashOfConfig":"33"},{"size":10589,"mtime":1650559257371,"results":"44","hashOfConfig":"33"},{"size":7547,"mtime":1650276355305,"results":"45","hashOfConfig":"33"},{"size":13275,"mtime":1650559362027,"results":"46","hashOfConfig":"33"},{"size":10769,"mtime":1651121428196,"results":"47","hashOfConfig":"33"},{"size":7664,"mtime":1650273965435,"results":"48","hashOfConfig":"33"},{"size":12383,"mtime":1651775649793,"results":"49","hashOfConfig":"33"},{"size":5163,"mtime":1649971146617,"results":"50","hashOfConfig":"33"},{"size":9617,"mtime":1650816468723,"results":"51","hashOfConfig":"33"},{"size":3649,"mtime":1649973439137,"results":"52","hashOfConfig":"33"},{"size":2444,"mtime":1651119128886,"results":"53","hashOfConfig":"33"},{"size":510,"mtime":1649972375232,"results":"54","hashOfConfig":"33"},{"size":1030,"mtime":1649752706928,"results":"55","hashOfConfig":"33"},{"size":2775,"mtime":1651121416748,"results":"56","hashOfConfig":"33"},{"size":12599,"mtime":1651849189813,"results":"57","hashOfConfig":"33"},{"size":1346,"mtime":1649752758932,"results":"58","hashOfConfig":"33"},{"size":10803,"mtime":1651152796885,"results":"59","hashOfConfig":"33"},{"size":317,"mtime":1649972452190,"results":"60","hashOfConfig":"33"},{"size":6517,"mtime":1651158412713,"results":"61","hashOfConfig":"33"},{"size":4701,"mtime":1650556382276,"results":"62","hashOfConfig":"33"},{"size":301,"mtime":1649926352538,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lgmx0s",{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\understand_project_code\\react-social\\client\\src\\index.js",[],"E:\\understand_project_code\\react-social\\client\\src\\App.js",["134"],"import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Home from \"./layout/home/Home\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Navbar from \"./layout/navbar/Navbar\";\nimport DeveloperList from \"./modules/developers/developer-list/DeveloperList\";\nimport DeveloperDetails from \"./modules/developers/developer-details/DeveloperDetails\";\nimport UserRegister from \"./modules/users/user-register/UserRegister\";\nimport UserLogin from \"./modules/users/user-login/UserLogin\";\nimport Alert from \"./layout/misc/alert/Alert\";\nimport Dashboard from \"./modules/profiles/dashboard/Dashboard\";\nimport CreateProfile from \"./modules/profiles/create-profile/CreateProfile\";\nimport EditProfile from \"./modules/profiles/edit-profile/EditProfile\";\nimport AddEducation from \"./modules/profiles/add-education/AddEducation\";\nimport AddExperience from \"./modules/profiles/add-experience/AddExperience\";\nimport * as userActions from \"./redux/users/user.action\";\nimport { useDispatch } from \"react-redux\";\nimport PostList from \"./modules/posts/post-list/PostList\";\nimport PostDetails from \"./modules/posts/post-details/PostDetails\";\n// import PrivateRoute from \"./util/PrivateRoute\";\n\nconst App = () => {\n  let dispatch = useDispatch(); // dispatching any action\n\n  //  //  🌳 😄 🥰  whenever this page gets loaded then automatically call below method  👍 💭\n  //  📓📓📓📓📓  Even after refreshing the page below action dispatch() and fetching data 📓📓📓📓📓📓\n  useEffect(() => {\n    dispatch(userActions.getUserInfo());\n  }, []);\n  return (\n    <React.Fragment>\n      {/* Router configuration */}\n      <Router>\n        <Navbar />\n\n        {/* adding  alert component here to display alert message in every component */}\n        <Alert />\n\n        {/* Component specification */}\n        <Routes>\n          {/* 👿👿👿👿  \"PrivateRoute\" -> w/o login we can't access it */}\n          <Route exact path=\"/\" element={<Home />} />\n          <Route exact path=\"/profiles/dashboard\" element={<Dashboard />} />\n          <Route exact path=\"/developers\" element={<DeveloperList />} />\n          <Route\n            exact\n            path=\"/developers/:developerId\" // \"developerId\" -> comes from url of the component\n            element={<DeveloperDetails />}\n          />\n          <Route exact path=\"/users/register\" element={<UserRegister />} />\n          <Route exact path=\"/users/login\" element={<UserLogin />} />\n          <Route\n            exact\n            path=\"/profiles/create-profile\"\n            element={<CreateProfile />}\n          />\n          <Route\n            exact\n            path=\"/profiles/edit-profile\"\n            element={<EditProfile />}\n          />\n          <Route\n            exact\n            path=\"/profiles/add-education\"\n            element={<AddEducation />}\n          />\n          <Route\n            exact\n            path=\"/profiles/add-experience\"\n            element={<AddExperience />}\n          />\n          <Route exact path=\"/posts/list\" element={<PostList />} />\n          <Route exact path=\"/posts/:postId\" element={<PostDetails />} />\n        </Routes>\n      </Router>\n\n      <div style={{ marginBottom: \"100px\" }} />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","E:\\understand_project_code\\react-social\\client\\src\\redux\\store.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\root.reducer.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\users\\user.action.js",[],"E:\\understand_project_code\\react-social\\client\\src\\layout\\navbar\\Navbar.js",[],"E:\\understand_project_code\\react-social\\client\\src\\layout\\home\\Home.js",[],"E:\\understand_project_code\\react-social\\client\\src\\layout\\misc\\alert\\Alert.js",[],"E:\\understand_project_code\\react-social\\client\\src\\modules\\users\\user-register\\UserRegister.js",[],"E:\\understand_project_code\\react-social\\client\\src\\modules\\developers\\developer-list\\DeveloperList.js",["135"],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; // useDispatch() we use to dispatch an action to the store\r\nimport * as developerActions from \"../../../redux/developers/developer.actions\";\r\nimport * as developerReducer from \"../../../redux/developers/developer.reducer\";\r\nimport Spinner from \"../../../layout/misc/spinner/Spinner\";\r\n\r\nlet DeveloperList = () => {\r\n  let dispatch = useDispatch(); //  use to dispatch an action to store\r\n\r\n  // useSelector() -> get the data from the store and display them\r\n  let developerInfo = useSelector((state) => {\r\n    // useSelector() -> has a default arg.  \"state\" -> to access state info\r\n    return state[developerReducer.developerFeatureKey];\r\n  });\r\n  let { loading, profiles } = developerInfo; // get data from db  and distructure them\r\n\r\n  // console.log(\"###############  Developer Reducer  #################WWWWW\");\r\n  // console.log(profiles);\r\n\r\n  //  we get data as soon as page is loded\r\n  useEffect(() => {\r\n    // dispatch an action  to  get data from server and keep them in the store\r\n    dispatch(developerActions.fetchAllDevelopers());\r\n  }, []); // [] -> dependency to dispatch an action only-one time  otherwise  keep-on action dispatch and fetching data\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"p-3\">\r\n        <div className=\"container\">\r\n          <div className=\"row animated zoomIn\">\r\n            <div className=\"col\">\r\n              <p className=\"h3 text-teal\">\r\n                <i className=\"fa fa-user-tie\" /> Developer\r\n              </p>\r\n              <p>\r\n                A computer programmer, sometimes called a software developer, a\r\n                programmer or more recently a coder (especially in more informal\r\n                contexts), is a person who creates computer software. The term\r\n                computer programmer can refer to a specialist in one area of\r\n                computers or to a generalist who writes computer programs.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* developer card section start */}\r\n      <section>\r\n        {loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <React.Fragment>\r\n            {profiles.length > 0 ? (\r\n              <React.Fragment>\r\n                <div className=\"container\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      {/* we want to loop multiple cards */}\r\n                      {profiles.map((profile) => {\r\n                        return (\r\n                          <div\r\n                            className=\"card my-2 animated zoomInDown\"\r\n                            key={profile._id}\r\n                          >\r\n                            <div className=\"card-body bg-light-grey z-depth-2\">\r\n                              <div className=\"row\">\r\n                                <div className=\"col-md-2\">\r\n                                  <img\r\n                                    src={profile.user.avatar}\r\n                                    className=\"img-fluid img-thumbnail\"\r\n                                    alt=\"\"\r\n                                  />\r\n                                </div>\r\n                                <div className=\"col-md-5\">\r\n                                  <h4>{profile.user.name}</h4>\r\n                                  <small className=\"h5\">\r\n                                    {profile.designation}\r\n                                  </small>\r\n                                  <br />\r\n                                  <small className=\"h6\">\r\n                                    {profile.company}\r\n                                  </small>\r\n                                  <br />\r\n                                  <small>{profile.location}</small>\r\n                                  <br />\r\n                                  {/* \"{`/developers/${profile._id}`}\" -> this link provides the particular profile when we click on particular  \"view profile\" dynamically */}\r\n                                  <Link\r\n                                    to={`/developers/${profile._id}`}\r\n                                    className=\"btn btn-teal btn-sm\"\r\n                                  >\r\n                                    view Profile\r\n                                  </Link>\r\n                                </div>\r\n                                <div className=\"col-md-5\">\r\n                                  {profile.skills.length > 0 &&\r\n                                    profile.skills.map((skill, index) => {\r\n                                      return (\r\n                                        <div key={index}>\r\n                                          <span className=\"badge badge-success p-2 mb-1\">\r\n                                            <i className=\"fa fa-check-circle\" />\r\n                                            {skill}\r\n                                          </span>\r\n                                          <br />\r\n                                        </div>\r\n                                      );\r\n                                    })}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </React.Fragment>\r\n            ) : null}\r\n          </React.Fragment>\r\n        )}\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DeveloperList;\r\n","E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\dashboard\\Dashboard.js",["136"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as userReducer from \"../../../redux/users/userReducer\";\r\nimport Spinner from \"../../../layout/misc/spinner/Spinner\";\r\nimport * as profileActions from \"../../../redux/profiles/profile.action\";\r\nimport * as profileReducer from \"../../../redux/profiles/profile.reducer\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nlet Dashboard = () => {\r\n  let dispatch = useDispatch();\r\n\r\n  //  here we get all user's data from STORE by 'reducer' file and store them in local variable\r\n  let userInfo = useSelector((state) => {\r\n    return state[userReducer.userFeatureKey]; // fetch the initialState from 'userReducer'\r\n  });\r\n\r\n  let profileInfo = useSelector((state) => {\r\n    return state[profileReducer.profileFeatureKey];\r\n  });\r\n\r\n  // 1st we've to check profile object is empty or not,  Empty -> make an option of \"Create profile\",  Not Empty -> make an option of \"Edit profile\"\r\n  let { profile, loading } = profileInfo;\r\n\r\n  //  // 🍰🍰🍰🍰 'dispatch' an action to fetch the data and that data is loaded as soon as page is loaded\r\n  useEffect(() => {\r\n    dispatch(profileActions.getProfile());\r\n  }, []); // [] -> empty array is the dependency array that triggers url only-one times\r\n\r\n  let { user } = userInfo; //  loading -> flag,  user -> an object @ user''s info\r\n\r\n  //  Delete experience\r\n  let clickDeleteExperience = (experienceId) => {\r\n    console.log(\"jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\");\r\n    console.log(experienceId);\r\n    dispatch(profileActions.deleteExperience(experienceId));\r\n  };\r\n\r\n  //  Delete education\r\n  let clickDeleteEducation = (educationId) => {\r\n    dispatch(profileActions.deleteEducation(educationId));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {loading ? ( // checks weather data if fetching or not ?\r\n        <Spinner />\r\n      ) : (\r\n        <React.Fragment>\r\n          <section className=\"p-3\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <p className=\"h3 text-teal\">\r\n                    <i className=\"fa fa-sitemap\" />\r\n                    <span className=\"ml-1\">Dashboard</span>\r\n                  </p>\r\n                  {/* before showing user's profile condition check */}\r\n                  {Object.keys(user).length > 0 && ( //  &&  ->  if this happens then do this\r\n                    <p className=\"h5\">Welcome {user.name}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        </React.Fragment>\r\n      )}\r\n\r\n      {/* here 1st we've to check profile object is empty or not,  Empty -> make an option of \"Create profile\",  Not Empty -> make an option of \"Edit profile\" */}\r\n      {Object.keys(profile).length > 0 ? (\r\n        <React.Fragment>\r\n          {/* option:- Edit profile, Add Experience, Add Education  Link/Button */}\r\n          <section>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <Link\r\n                    to=\"/profiles/edit-profile\"\r\n                    className=\"btn btn-white text-teal btn-sm\"\r\n                  >\r\n                    <i className=\"fa fa-user-cog\" />\r\n                    <span className=\"ml-1\">Edit Profile</span>\r\n                  </Link>\r\n                  <Link\r\n                    to=\"/profiles/add-experience\"\r\n                    className=\"btn btn-white text-teal btn-sm\"\r\n                  >\r\n                    <i className=\"fa fa-user-tie\" />\r\n                    <span className=\"ml-1\">Add Experience</span>\r\n                  </Link>\r\n                  <Link\r\n                    to=\"/profiles/add-education\"\r\n                    className=\"btn btn-white text-teal btn-sm\"\r\n                  >\r\n                    <i className=\"fa fa-graduation-cap\" />\r\n                    <span className=\"ml-1\">Add Education</span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          {/* Adding Experience Details */}\r\n          <section>\r\n            {/* ===== Checking experience array[...] has some data or not ======= */}\r\n            {profile.experience.length > 0 && (\r\n              <div className=\"container\">\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <p className=\"h3 teal-text\">Experience Details</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <table className=\"table table-hover text-center table-light table-striped\">\r\n                      <thead className=\"bg-teal text-white z-depth-2\">\r\n                        <tr>\r\n                          <th>Title</th>\r\n                          <th>Company</th>\r\n                          <th>Location</th>\r\n                          <th>From</th>\r\n                          <th>To</th>\r\n                          <th>Action</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {/* ========= Since experience is an array[] ======== */}\r\n                        {profile.experience.map((exp) => {\r\n                          return (\r\n                            // returns JSX with the key value, B'z  map() method alway's return a unique id\r\n                            <tr key={exp._id}>\r\n                              <td>{exp.title}</td>\r\n                              <td>{exp.company}</td>\r\n                              <td>{exp.location}</td>\r\n                              <td>{exp.from}</td>\r\n                              <td>{exp.to}</td>\r\n                              <td>\r\n                                {/* delete experience */}\r\n                                <button\r\n                                  onClick={clickDeleteExperience.bind(\r\n                                    this,\r\n                                    exp._id\r\n                                  )}\r\n                                  className=\"btn btn-danger btn-sm\"\r\n                                >\r\n                                  Delete\r\n                                </button>\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </section>\r\n          {/* Adding Education Details */}\r\n          <section>\r\n            {/* ===== Checking experience array[...] has some data or not ======= */}\r\n            {profile.education.length > 0 && (\r\n              <div className=\"container\">\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <p className=\"h3 teal-text\">Education Details</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <table className=\"table table-hover text-center table-light table-striped\">\r\n                      <thead className=\"bg-teal text-white z-depth-2\">\r\n                        <tr>\r\n                          <th>School</th>\r\n                          <th>Degree</th>\r\n                          <th>Field of Study</th>\r\n                          <th>From</th>\r\n                          <th>To</th>\r\n                          <th>Action</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {/* ========= Since experience is an array[] ======== */}\r\n                        {profile.education.map((edu) => {\r\n                          return (\r\n                            // returns JSX with the key value, B'z  map() method alway's return a unique id\r\n                            <tr key={edu._id}>\r\n                              <td>{edu.school}</td>\r\n                              <td>{edu.degree}</td>\r\n                              <td>{edu.fieldOfStudy}</td>\r\n                              <td>{edu.from}</td>\r\n                              <td>{edu.to}</td>\r\n                              <td>\r\n                                {/* delete education */}\r\n                                <button\r\n                                  onClick={clickDeleteEducation.bind(\r\n                                    this,\r\n                                    edu._id\r\n                                  )}\r\n                                  className=\"btn btn-danger btn-sm\"\r\n                                >\r\n                                  Delete\r\n                                </button>\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </section>\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n          {/* Option:- Don't have profile -> Create profile */}\r\n          <section>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <small>\r\n                    You don't have any profile yet, plz create one and share\r\n                    with your own friends.\r\n                  </small>{\" \"}\r\n                  <br />\r\n                  <div style={{ marginLeft: \"10%\" }}>\r\n                    <Link\r\n                      to=\"/profiles/create-profile\"\r\n                      className=\"btn btn-white text-teal btn-sm\"\r\n                    >\r\n                      <i className=\"fa fa-user-cog p-2 rounded\" />\r\n                      Create Profile\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\create-profile\\CreateProfile.js",["137","138","139"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport Spinner from \"../../../layout/misc/spinner/Spinner\";\r\nimport * as profileActions from \"../../../redux/profiles/profile.action\";\r\nimport * as profileReducer from \"../../../redux/profiles/profile.reducer\";\r\n\r\nlet CreateProfile = () => {\r\n  let dispatch = useDispatch(); // for dispatching action\r\n  let navigate = useNavigate(); // for navigation purpose  useHistory() -> useNavigate()\r\n\r\n  // taking 'useState' to manage our profile locally and then at submitting time send to the REDUX and store there\r\n  let [profile, setProfile] = useState({\r\n    company: \"\",\r\n    website: \"\",\r\n    location: \"\",\r\n    designation: \"\",\r\n    skills: \"\",\r\n    bio: \"\",\r\n    githubusername: \"\",\r\n    youtube: \"\",\r\n    facebook: \"\",\r\n    twitter: \"\",\r\n    linkedin: \"\",\r\n    instagram: \"\",\r\n  });\r\n\r\n  //  \"reading\" data i.e. coming from from the STORE (dispatching an action) -> useEffect(() =>{  dispatch(...)  })\r\n  let profileInfo = useSelector((state) => {\r\n    return state[profileReducer.profileFeatureKey];\r\n  });\r\n\r\n  // we want to get data as soon as page is load\r\n  useEffect(() => {\r\n    dispatch(profileActions.getProfile); // dispatch an action to get the profile\r\n\r\n    //  here updating / binding  data to localProfile.designation  onChange={updateInput}store  ❓❓❓❓ How we can change localProfile.designation  onChange={updateInput}❓❓❓❓\r\n    setProfile({\r\n      company: profile.company ? profile.company : \"\",\r\n      website: profile.website ? profile.website : \"\",\r\n      location: profile.location ? profile.location : \"\",\r\n      designation: profile.designation ? profile.designation : \"\",\r\n      skills: profile.skills ? profile.skills : \"\",\r\n      bio: profile.bio ? profile.bio : \"\",\r\n      githubusername: profile.githubusername ? profile.githubusername : \"\",\r\n      // we can also do like this\r\n      youtube: profile && profile.social?.youtube ? profile.social.youtube : \"\",\r\n      facebook:\r\n        profile && profile.social?.facebook ? profile.social.facebook : \"\",\r\n      twitter: profile && profile.social?.twitter ? profile.social.twitter : \"\",\r\n      linkedin:\r\n        profile && profile.social?.linkedin ? profile.social.linkedin : \"\",\r\n      instagram:\r\n        profile && profile.social?.instagram ? profile.social.instagram : \"\",\r\n    });\r\n  }, []);\r\n\r\n  // ❓❓ here update input fields locally by user's ❓❓\r\n  let updateInput = (event) => {\r\n    setProfile({\r\n      ...profile, // keep hold of existing data and modify remaining data if changes happen\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  let submitCreateProfile = (e) => {\r\n    e.preventDefault();\r\n    //  dispatch an action for submiting a form  && navigation to the server\r\n    // ♻️♻️♻️ In order to passing parameter with action method, we want to use them during perform 'action' -> profile.Action.js -> \"UPDATE_PROFILE_SUCCESS\"\r\n    dispatch(profileActions.createProfile(profile, navigate)); // \"navigate\" we send to  \"profile.Action\" file as a parameter -> after profileUpdation redirect edit-profile page to \"dashboard\" page\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      {/* <pre>{JSON.stringify(profile)}</pre> */}\r\n      <section className=\"p-3\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <p className=\"h3 text-teal\">\r\n                {\" \"}\r\n                <i className=\"fa fa-user-circle\" />{\" \"}\r\n                <span className=\"ml-1\">Create a Profile</span>\r\n              </p>\r\n              <p>\r\n                Wikis are great sites dedicated to either a specific topic or\r\n                collection of topics. Sometimes you may come across that your\r\n                niche hobby or interest isn't well-represented in the wiki\r\n                community. Fortunately, you can remedy this by creating your\r\n                own, and then let other users across the Web edit the wiki to\r\n                help you out.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <React.Fragment>\r\n        <section className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8\">\r\n              <form onSubmit={submitCreateProfile}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"company\"\r\n                    value={profile.company}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Company\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"website\"\r\n                    value={profile.website}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Website\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"location\"\r\n                    value={profile.location}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Location\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <select\r\n                    required\r\n                    className=\"form-control\"\r\n                    name=\"designation\"\r\n                    value={profile.designation}\r\n                    onChange={updateInput}\r\n                  >\r\n                    <option value=\"\">Select Designation</option>\r\n                    <option value=\"Junior Developer\">Junior Developer</option>\r\n                    <option value=\"Senior Developer\">Senior Developer</option>\r\n                    <option value=\"Tech Lead\">Tech Lead</option>\r\n                    <option value=\"Junior Manager\">Junior Manager</option>\r\n                    <option value=\"Senior Managaer\">Senior Managaer</option>\r\n                    <option value=\"Project Director\">Project Director</option>\r\n                    <option value=\"Manaiging Director\">\r\n                      Manaiging Director\r\n                    </option>\r\n                  </select>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"skills\"\r\n                    value={profile.skills}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Skills\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    required\r\n                    rows=\"3\"\r\n                    name=\"bio\"\r\n                    value={profile.bio}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Job-Description / Biography\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"githubusername\"\r\n                    value={profile.githubusername}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Github-Username\"\r\n                  />\r\n                </div>\r\n                <hr />\r\n\r\n                <small className=\"text-teal\">Social Media Links</small>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"youtube\"\r\n                    value={profile.youtube}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"YouTube\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"linkedin\"\r\n                    value={profile.linkedin}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"LinkedIn\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"twitter\"\r\n                    value={profile.twitter}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Twitter\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"facebook\"\r\n                    value={profile.facebook}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Facebook\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"instagram\"\r\n                    value={profile.instagram}\r\n                    onChange={updateInput}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Instagram\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <Link\r\n                    to=\"/profiles/dashboard\"\r\n                    className=\"btn bg-light-grey btn-sm\"\r\n                  >\r\n                    Back\r\n                  </Link>\r\n                  <span>\r\n                    <input\r\n                      type=\"submit\"\r\n                      className=\"btn btn-teal btn-sm float-right\"\r\n                      value=\"Create Profile\"\r\n                    />\r\n                  </span>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </React.Fragment>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CreateProfile;\r\n","E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\add-education\\AddEducation.js",[],"E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\edit-profile\\EditProfile.js",["140"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport Spinner from \"../../../layout/misc/spinner/Spinner\";\r\nimport * as profileActions from \"../../../redux/profiles/profile.action\";\r\nimport * as profileReducer from \"../../../redux/profiles/profile.reducer\";\r\n\r\n//  //  💻 🥶 😰 Since, our \"EditProfile.js\" is an 'editable'  page, where we can even edit our profile Locally and update them.\r\nlet EditProfile = () => {\r\n  let dispatch = useDispatch(); // for dispatching action\r\n  let navigate = useNavigate(); // for navigation purpose  useHistory() -> useNavigate()\r\n\r\n  // taking 'useState' to manage our profile locally and then at submitting time send to the REDUX and store there\r\n  let [localProfile, setlocalProfile] = useState({\r\n    company: \"\",\r\n    website: \"\",\r\n    location: \"\",\r\n    designation: \"\",\r\n    skills: \"\",\r\n    bio: \"\",\r\n    githubusername: \"\",\r\n    youtube: \"\",\r\n    facebook: \"\",\r\n    twitter: \"\",\r\n    linkedin: \"\",\r\n    instagram: \"\",\r\n\r\n    // here we don't mentain 'experience' & 'education' -> these're array of objects  ->  b'z we've create seperate \"button\" for that\r\n    //  actually below code  chlega, b'z we assigning data of social-media  setLocalProfile(...) in this format   \"youtube:  ♻️♻️ 😕😕 profile.social?.youtube ♻️♻️😕😕 ? profile.social.youtube : \"\",\"\r\n    //   social: {\r\n    //     youtube: \"\",\r\n    //     facebook: \"\",\r\n    //     twitter: \"\",\r\n    //     linkedin: \"\",\r\n    //     instagram: \"\",\r\n    //   },\r\n  });\r\n\r\n  //  \"reading\" data i.e. coming from from the STORE (dispatching an action) -> useEffect(() =>{  dispatch(...)  })\r\n  let profileInfo = useSelector((state) => {\r\n    return state[profileReducer.profileFeatureKey];\r\n  });\r\n\r\n  //  ♻️ ♻️  \"profile: storeProfile\" -> process of renaming or alise name.\r\n  // let { loading, profile: storeProfile } = profileInfo;   // this is valid statement\r\n  let { loading, profile } = profileInfo;\r\n\r\n  // we want to get data as soon as page is load\r\n  useEffect(() => {\r\n    dispatch(profileActions.getProfile); // dispatch an action to get the profile\r\n\r\n    //  here updating / binding  data to localProfile.designation  onChange={updateInput}store  ❓❓❓❓ How we can change localProfile.designation  onChange={updateInput}❓❓❓❓\r\n    setlocalProfile({\r\n      company: profile.company ? profile.company : \"\",\r\n      website: profile.website ? profile.website : \"\",\r\n      location: profile.location ? profile.location : \"\",\r\n      designation: profile.designation ? profile.designation : \"\",\r\n      skills: profile.skills ? profile.skills : \"\",\r\n      bio: profile.bio ? profile.bio : \"\",\r\n      githubusername: profile.githubusername ? profile.githubusername : \"\",\r\n      // we can also do like this\r\n      youtube: profile && profile.social?.youtube ? profile.social.youtube : \"\",\r\n      facebook:\r\n        profile && profile.social?.facebook ? profile.social.facebook : \"\",\r\n      twitter: profile && profile.social?.twitter ? profile.social.twitter : \"\",\r\n      linkedin:\r\n        profile && profile.social?.linkedin ? profile.social.linkedin : \"\",\r\n      instagram:\r\n        profile && profile.social?.instagram ? profile.social.instagram : \"\",\r\n      // youtube: profile.social?.youtube ? profile.social.youtube : \"\",\r\n      // facebook: profile.social?.facebook ? profile.social.facebook : \"\",\r\n      // twitter: profile.social?.twitter ? profile.social.twitter : \"\",\r\n      // linkedin: profile.social?.linkedin ? profile.social.linkedin : \"\",\r\n      // instagram: profile.social?.instagram ? profile.social.instagram : \"\",\r\n\r\n      // social: {  🧾 b'z in Database, we don't provide social in \"nested\" form -> providing data in normal way\r\n      //   youtube: profile.social?.youtube ? profile.social.youtube : \"\",\r\n      //   facebook: profile.social?.facebook ? profile.social.facebook : \"\",\r\n      //   twitter: profile.social?.twitter ? profile.social.twitter : \"\",\r\n      //   linkedin: profile.social?.linkedin ? profile.social.linkedin : \"\",\r\n      //   instagram: profile.social?.instagram ? profile.social.instagram : \"\",\r\n      // },\r\n    });\r\n  }, []);\r\n\r\n  // ❓❓ here update input fields locally by user's ❓❓\r\n  let updateInput = (event) => {\r\n    setlocalProfile({\r\n      ...localProfile, // keep hold of existing data and modify remaining data if changes happen\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // ❓❓❓❓ since, social -> object we can't write directly as a property b'z  it is  nested object, so we can't  do directly\r\n  //  ❓❓❓❓ So, we making seperate function for,  nested object change\r\n  // let updateSocial = (event) => {\r\n  //   setlocalProfile({\r\n  //     ...localProfile,\r\n  //     social: {\r\n  //       ...localProfile.social,\r\n  //       [event.target.name]: event.target.value,\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  let submitUpdateProfile = (e) => {\r\n    e.preventDefault();\r\n    //  dispatch an action for submiting a form  && navigation to the server\r\n    // ♻️♻️♻️ In order to passing parameter with action method, we want to use them during perform 'action' -> profile.Action.js -> \"UPDATE_PROFILE_SUCCESS\"\r\n    dispatch(profileActions.updateProfile(localProfile, navigate)); // \"navigate\" we send to  \"profile.Action\" file as a parameter -> after profileUpdation redirect edit-profile page to \"dashboard\" page\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"p-3\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <p className=\"h3 text-teal\">\r\n                <i className=\"fa fa-user-circle\" />\r\n                <span className=\"ml-1\">Edit Profile</span>\r\n              </p>\r\n              <p>\r\n                Wikis are great sites dedicated to either a specific topic or\r\n                collection of topics. Sometimes you may come across that your\r\n                niche hobby or interest isn't well-represented in the wiki\r\n                community. Fortunately, you can remedy this by creating your\r\n                own, and then let other users across the Web edit the wiki to\r\n                help you out.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* <pre>{JSON.stringify(localProfile)}</pre> */}\r\n\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <React.Fragment>\r\n          <section className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-8\">\r\n                <form onSubmit={submitUpdateProfile}>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"company\"\r\n                      value={localProfile.company}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Company\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"website\"\r\n                      value={localProfile.website}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Website\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"location\"\r\n                      value={localProfile.location}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Location\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <select\r\n                      required\r\n                      className=\"form-control\"\r\n                      name=\"designation\"\r\n                      value={localProfile.designation}\r\n                      onChange={updateInput}\r\n                    >\r\n                      <option value=\"\">Select Designation</option>\r\n                      <option value=\"Junior Developer\">Junior Developer</option>\r\n                      <option value=\"Senior Developer\">Senior Developer</option>\r\n                      <option value=\"Tech Lead\">Tech Lead</option>\r\n                      <option value=\"Junior Manager\">Junior Manager</option>\r\n                      <option value=\"Senior Managaer\">Senior Managaer</option>\r\n                      <option value=\"Project Director\">Project Director</option>\r\n                      <option value=\"Manaiging Director\">\r\n                        Manaiging Director\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"skills\"\r\n                      value={localProfile.skills}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Skills\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <textarea\r\n                      required\r\n                      rows=\"3\"\r\n                      name=\"bio\"\r\n                      value={localProfile.bio}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Job-Description / Biography\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"githubusername\"\r\n                      value={localProfile.githubusername}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Github-Username\"\r\n                    />\r\n                  </div>\r\n                  <hr />\r\n\r\n                  <small className=\"text-teal\">Social Media Links</small>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"youtube\"\r\n                      value={localProfile.youtube}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"YouTube\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"linkedin\"\r\n                      value={localProfile.linkedin}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"LinkedIn\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"twitter\"\r\n                      value={localProfile.twitter}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Twitter\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"facebook\"\r\n                      value={localProfile.facebook}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Facebook\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      required\r\n                      type=\"text\"\r\n                      name=\"instagram\"\r\n                      value={localProfile.instagram}\r\n                      onChange={updateInput}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Instagram\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Link\r\n                      to=\"/profiles/dashboard\"\r\n                      className=\"btn bg-light-grey btn-sm\"\r\n                    >\r\n                      Back\r\n                    </Link>\r\n                    <span>\r\n                      <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-teal btn-sm float-right\"\r\n                        value=\"Update\"\r\n                      />\r\n                    </span>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EditProfile;\r\n","E:\\understand_project_code\\react-social\\client\\src\\modules\\developers\\developer-details\\DeveloperDetails.js",["141"],"import React, { useEffect } from \"react\";\r\n//  access the 'history' instance used by React Router. Using the 'history instance' you can \"redirect\" users to another page\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as developerActions from \"../../../redux/developers/developer.actions\";\r\nimport * as developerReducer from \"../../../redux/developers/developer.reducer\"; // we read the state data\r\nimport Spinner from \"../../../layout/misc/spinner/Spinner\";\r\n\r\nlet DeveloperDetails = () => {\r\n  let dispatch = useDispatch(); // action dispatch\r\n\r\n  let developerInfo = useSelector((state) => {\r\n    //   get state(data) from the store\r\n    return state[developerReducer.developerFeatureKey];\r\n  });\r\n\r\n  let { loading, selectedProfile } = developerInfo;\r\n\r\n  // console.log(\"@@@@@@@@@@@ Developer Details @@@@@@@@@@@@@@@@@@\");\r\n  // console.log(selectedProfile);\r\n\r\n  // \"developerId\" -> by using this id we want to display the data of user-profile\r\n  let developerId = useParams().developerId; // \"useParams\" -> to get the parameter from 'url'\r\n  // console.log(\"******************  Developer Details ***********\");\r\n  // console.log(developerId);\r\n  useEffect(() => {\r\n    dispatch(developerActions.fetchDeveloper(developerId)); // fetching particular developer and keep them in the store\r\n  }, [developerId]); // useEffect() -> [developerId] -> dependency takes an agr. to fetch the data\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* we've to check weather content is empty or not,  if empty -> Spinner and not empty -> display data */}\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <React.Fragment>\r\n          {/* here again we've to check Object is there or not ? */}\r\n          {Object.keys(selectedProfile).length > 0 && ( // \"&&\" -> represent if this is there then do this\r\n            <React.Fragment>\r\n              <section className=\"p-3\">\r\n                <div className=\"container\">\r\n                  <div className=\"row animated zoomIn\">\r\n                    <div className=\"col\">\r\n                      <p className=\"h3 text-teal\">\r\n                        <i className=\"fa fa-user-tie\" />{\" \"}\r\n                        {selectedProfile.user.name}'s Profile\r\n                      </p>\r\n                      <p>\r\n                        A web developer is a programmer or a coder who\r\n                        specializes in, or is specifically engaged in, the\r\n                        development of World Wide Web applications using a\r\n                        client–server model. The applications typically use\r\n                        HTML, CSS and JavaScript in the client, PHP, ASP.NET\r\n                        (C#), Python, Node.js, Go or Java in the server, and\r\n                        http for communications between client and server.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </section>\r\n              <section>\r\n                <div className=\"container bg-teal text-center text-white p-3\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      <img\r\n                        src={selectedProfile.user.avatar}\r\n                        alt=\"\"\r\n                        width=\"200\"\r\n                        height=\"200\"\r\n                        // className=\"rounded-circle img-thumbnail\"\r\n                        className=\"rounded-circle profile-img\"\r\n                      />\r\n                      <p className=\"h2\">{selectedProfile.user.name}</p>\r\n                      <p className=\"h6\">{selectedProfile.designation}</p>\r\n                      <p className=\"h6\">{selectedProfile.company}</p>\r\n                      <p>{selectedProfile.location}</p>\r\n                      <div className=\"d-flex flex-row justify-content-center\">\r\n                        <div className=\"p-2\">\r\n                          <i className=\"fab fa-facebook\" />\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                          <i className=\"fab fa-twitter\" />\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                          <i className=\"fab fa-linkedin\" />\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                          <i className=\"fab fa-youtube\" />\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                          <i className=\"fab fa-instagram\" />\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                          <i className=\"fab fa-whatsapp\" />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Developer's bio */}\r\n                <div className=\"container\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col text-center\">\r\n                      <div className=\"card my-2\"></div>\r\n                      <div className=\"card-body bg-light-grey text-teal\">\r\n                        <p className=\"h3\">\r\n                          {selectedProfile.user.name}'s Biography\r\n                        </p>\r\n                        <p>{selectedProfile.bio}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Developer's skills */}\r\n                <div className=\"container\">\r\n                  <div className=\"row mt-1\">\r\n                    <div className=\"col text-center\">\r\n                      <div className=\"card my-2\">\r\n                        <div className=\"card-body bg-light-grey text-teal\">\r\n                          <p className=\"h3\">\r\n                            {selectedProfile.user.name}'s Skills\r\n                          </p>\r\n                          {selectedProfile.skills.map((skill, index) => {\r\n                            return (\r\n                              <span\r\n                                className=\"badge badge-dark p-2 m-2\"\r\n                                key={index}\r\n                              >\r\n                                {skill}\r\n                              </span>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Developer's Education */}\r\n                <div className=\"container\">\r\n                  <div className=\"row mt-1\">\r\n                    <div className=\"col-md-6\">\r\n                      {selectedProfile.education.length > 0 ? (\r\n                        <React.Fragment>\r\n                          <div className=\"card\">\r\n                            <div className=\"card-body bg-light-grey\">\r\n                              <p className=\"display-4\">Education:- </p>\r\n                              <ul className=\"list-group\">\r\n                                {selectedProfile.education.map((edu, index) => {\r\n                                  return (\r\n                                    <li\r\n                                      className=\"list-group-item mt-2\"\r\n                                      key={edu._id}\r\n                                    >\r\n                                      <span>School: {edu.school}</span>\r\n                                      <br />\r\n                                      <span>Degree: {edu.degree}</span>\r\n                                      <br />\r\n                                      <span>\r\n                                        FieldOfStudy: {edu.fieldOfStudy}\r\n                                      </span>\r\n                                      <br />\r\n                                      <span>From: {edu.from}</span>\r\n                                      <br />\r\n                                      <span>To: {edu.to}</span>\r\n                                      <br />\r\n                                      <span>\r\n                                        Education Description: {edu.description}\r\n                                      </span>\r\n                                    </li>\r\n                                  );\r\n                                })}\r\n                              </ul>\r\n                            </div>\r\n                          </div>\r\n                        </React.Fragment>\r\n                      ) : null}\r\n                    </div>\r\n\r\n                    {/* Developer Experience */}\r\n                    <div className=\"col-md-6\">\r\n                      {selectedProfile.experience.length > 0 ? (\r\n                        <React.Fragment>\r\n                          <div className=\"card\">\r\n                            <div className=\"card-body bg-light-grey\">\r\n                              <p className=\"display-4\">Experience:- </p>\r\n                              <ul className=\"list-group\">\r\n                                {selectedProfile.experience.map(\r\n                                  (exp, index) => {\r\n                                    return (\r\n                                      <li\r\n                                        className=\"list-group-item mt-2\"\r\n                                        key={exp._id}\r\n                                      >\r\n                                        <span>Title: {exp.title}</span>\r\n                                        <br />\r\n                                        <span>Company: {exp.company}</span>\r\n                                        <br />\r\n                                        <span>Location: {exp.location}</span>\r\n                                        <br />\r\n                                        <span>From: {exp.from}</span>\r\n                                        <br />\r\n                                        <span>To: {exp.to}</span>\r\n                                        <br />\r\n                                        <span>\r\n                                          Job Description: {exp.description}\r\n                                        </span>\r\n                                      </li>\r\n                                    );\r\n                                  }\r\n                                )}\r\n                              </ul>\r\n                            </div>\r\n                          </div>\r\n                        </React.Fragment>\r\n                      ) : null}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </section>\r\n            </React.Fragment>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DeveloperDetails;\r\n","E:\\understand_project_code\\react-social\\client\\src\\modules\\profiles\\add-experience\\AddExperience.js",[],"E:\\understand_project_code\\react-social\\client\\src\\modules\\posts\\post-list\\PostList.js",["142"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinnner from \"../../../layout/misc/spinner/Spinner\";\r\nimport * as userReducer from \"../../../redux/users/userReducer\";\r\nimport * as postActions from \"../../../redux/posts/post.actions\";\r\nimport * as postReducer from \"../../../redux/posts/post.reducer\";\r\n\r\nlet PostList = () => {\r\n  //  //  creating local state for form-binding and state management and after 'submit' send to the backend - server side\r\n  let [localPost, setLocalPost] = useState({\r\n    text: \"\",\r\n    image: \"\",\r\n  });\r\n\r\n  let dispatch = useDispatch(); // -> dispatch an action to action\r\n\r\n  //  //  here we fetch user-info  to display 'loading',  'name'  and  'image'\r\n  let userInfo = useSelector((state) => {\r\n    return state[userReducer.userFeatureKey];\r\n  });\r\n\r\n  let { user } = userInfo;\r\n\r\n  // fetching post-info from  'postReduver' to display them\r\n  let postInfo = useSelector((state) => {\r\n    return state[postReducer.postsFeatureKey];\r\n  });\r\n\r\n  let { loading, posts } = postInfo; // loading -> display <spinner />  otherwise -> display post content\r\n\r\n  // useEffect() -> dispatch an action when  ->  as-soon-as page loads\r\n  useEffect(() => {\r\n    dispatch(postActions.getAllPosts()); // fetching all posts  and  keep them in store\r\n  }, []); // [] -> dependency which means one-time request fetching not unlimited-times\r\n\r\n  //  //  updateInput() form-binding\r\n  let updateInput = (event) => {\r\n    setLocalPost({\r\n      ...localPost,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  //  //  submit create post -> submitCreatePost()\r\n  let submitCreatePost = (event) => {\r\n    event.preventDefault();\r\n    dispatch(postActions.createPost(localPost));\r\n    //  after action dispatch we set empty / clear the fields\r\n    setLocalPost({\r\n      text: \"\",\r\n      image: \"\",\r\n    });\r\n  };\r\n\r\n  // Delete a particular post\r\n  let clickDeletePost = (postId) => {\r\n    // console.log(\"&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\");\r\n    // console.log(postId);\r\n    dispatch(postActions.deletePost(postId));\r\n  };\r\n\r\n  // like a post\r\n  let clickLikepost = (postId) => {\r\n    dispatch(postActions.likePost(postId));\r\n  };\r\n\r\n  // unlike a post\r\n  let clickUnLikepost = (postId) => {\r\n    dispatch(postActions.unlikePost(postId));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <pre>{JSON.stringify(localPost)}</pre> */}\r\n      <section className=\"p-3\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <p className=\"h3 text-teal\">Welcome to React-Social Community</p>\r\n              <p>\r\n                React Hooks can be a powerful addition to your application,\r\n                however, implementing authentication and authorization on your\r\n                own can still be tricky. Thanks to Auth0, you can implement it\r\n                mostly out-of-the-box with just a little effort from your side!\r\n                Auth0 is a managed authentication platform that provides\r\n                connections to all of the major social media logins such as\r\n                Twitter, Google, and Facebook.\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            {/*  😖 😕 condition:-  if user is not empty then we display below info */}\r\n            {\r\n              //  //  👿 if this  'Object.keys(user).length > 0'  && -> then  this happen\r\n              Object.keys(user).length > 0 && (\r\n                <div className=\"col-md-8\">\r\n                  {/*  🏣 🏣 🏣  Create a new post for form submission  */}\r\n                  <form onSubmit={submitCreatePost}>\r\n                    {/*  Taking Input group */}\r\n                    <div className=\"input-group mb-1 \">\r\n                      <div className=\"input-group-prepend\">\r\n                        {/*  placing profile picture -> who is logged-in (person)  */}\r\n                        <span className=\"input-group-text\" id=\"basic-addon1\">\r\n                          <img\r\n                            src={user.avatar}\r\n                            alt=\"\"\r\n                            height=\"60\"\r\n                            width=\"60\"\r\n                            className=\"rounded-circle\"\r\n                          />\r\n                        </span>\r\n                      </div>\r\n                      <textarea\r\n                        required\r\n                        name=\"text\"\r\n                        value={localPost.text}\r\n                        onChange={updateInput}\r\n                        rows=\"3\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"What's in your mind...\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"input-group mb-1\">\r\n                      <div className=\"input-group-prepend\">\r\n                        <span className=\"input-group-text\" id=\"basic-addon1\">\r\n                          Image Url\r\n                        </span>\r\n                      </div>\r\n                      <input\r\n                        required\r\n                        name=\"image\"\r\n                        value={localPost.image}\r\n                        onChange={updateInput}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Image Url\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-teal btn-sm\"\r\n                        value=\"Post\"\r\n                      />\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              )\r\n            }\r\n          </div>\r\n          <hr /> {/*  To seperate create post and  display all other post  */}\r\n        </div>\r\n      </section>\r\n\r\n      {/*  🏝️ 🏊 Another section to display all the post posted by user's  */}\r\n      <section>\r\n        {loading ? (\r\n          <Spinnner />\r\n        ) : (\r\n          <React.Fragment>\r\n            {posts.length > 0 && (\r\n              <div className=\"container\">\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    {posts.map((post) => {\r\n                      return (\r\n                        <div className=\"card my-2\" key={post._id}>\r\n                          <div className=\"card-body bg-light-grey\">\r\n                            {/* here display image who made the comment's  ->  only logged person, everyone who comments */}\r\n\r\n                            <div className=\"row\">\r\n                              {/* for image -> who made this post */}\r\n                              <div className=\"col-md-2  d-flex flex-column align-items-center justify-content-center\">\r\n                                <img\r\n                                  src={post.avatar}\r\n                                  alt=\"\"\r\n                                  className=\"rounded-circle\"\r\n                                  width=\"70\"\r\n                                  height=\"70\"\r\n                                />{\" \"}\r\n                                <br />\r\n                                {/*  name -> who made the post  */}\r\n                                <small className=\"lead font-weight-bold text-teal font-italic\">\r\n                                  {post.name}\r\n                                </small>\r\n                              </div>\r\n\r\n                              {/* for content */}\r\n                              <div className=\"col-md-8\">\r\n                                {/* 🖊️🖊️🖊️ who made the post -> image of the post (post ka image)  */}\r\n                                <div className=\"row mb-1\">\r\n                                  <div className=\"col-md-6 m-auto d-block rounded img-thumbnail\">\r\n                                    <img\r\n                                      src={post.image}\r\n                                      alt=\"\"\r\n                                      className=\"img-fluid\"\r\n                                    />\r\n                                  </div>\r\n                                </div>\r\n                                {/*  🖊️🖊️🖊️🖊️🖊️ Make the post 🖊️🖊️🖊️🖊️🖊️  */}\r\n                                <p>{post.text}</p>\r\n                                <small>{post.createdAt}</small>\r\n                                <br />\r\n                                <button\r\n                                  className=\"btn rgba-green-light btn-sm\"\r\n                                  onClick={clickLikepost.bind(this, post._id)}\r\n                                >\r\n                                  <i className=\"fa fa-thumbs-up\" />\r\n                                  {post.likes.length}\r\n                                </button>\r\n                                <button\r\n                                  className=\"btn rgba-red-light btn-sm\"\r\n                                  onClick={clickUnLikepost.bind(this, post._id)}\r\n                                >\r\n                                  <i className=\"fa fa-thumbs-down\" />\r\n                                </button>\r\n                                <Link\r\n                                  to={`/posts/${post._id}`}\r\n                                  className=\"btn rgba-blue-light btn-sm\"\r\n                                >\r\n                                  <i className=\"fab fa-facebook-messenger\" />\r\n                                  Discussion {post.comments.length}\r\n                                </Link>\r\n\r\n                                {/* ========= 😕😕😕😕😕😕😕  Note:- Post only can be deleted by person \"who\" made the post or he can delete his own post  ->  not post deleted which id made by other person  😕😕😕😕😕😕😕 ========= */}\r\n                                {/*  post-deletion 'button' show only his own created post, delete-button not display on other person post  */}\r\n                                {/*  CONDITION: ->  Post creation person === loggedIn person should same.  = => since, every post has a user -> user_id  &&  every loggedIn person has an Id -> logIn_id  */}\r\n                                {/* {isAuthorized.bind(this, post) && (\r\n                                  <button className=\"btn rgba-amber-light btn-sm\">\r\n                                    <i className=\"fa fa-times-circle\" />\r\n                                  </button>\r\n                                )} */}\r\n\r\n                                {/* 'post.user' -> person who made the post, 'user._id' -> logged person id  */}\r\n                                {post.user === user._id ? (\r\n                                  <button\r\n                                    className=\"btn rgba-amber-light btn-sm\"\r\n                                    onClick={clickDeletePost.bind(\r\n                                      this,\r\n                                      post._id\r\n                                    )}\r\n                                  >\r\n                                    <i className=\"fa fa-times-circle\" /> Delete\r\n                                  </button>\r\n                                ) : null}\r\n\r\n                                {/* {post.user === user._id ? (\r\n                                  <button\r\n                                    className=\"btn rgba-amber-light btn-sm\"\r\n                                    onClick={clickDeletePost.bind(\r\n                                      this,\r\n                                      👿👿👿 post._Id 👿👿👿\r\n                                    )}\r\n                                  >\r\n                                    <i className=\"fa fa-times-circle\" /> Delete\r\n                                  </button>\r\n                                )  */}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","E:\\understand_project_code\\react-social\\client\\src\\modules\\users\\user-login\\UserLogin.js",[],"E:\\understand_project_code\\react-social\\client\\src\\modules\\posts\\post-details\\PostDetails.js",["143"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Spinner from \"../../../layout/misc/spinner/Spinner\";\r\nimport * as postActions from \"../../../redux/posts/post.actions\";\r\nimport * as postReducer from \"../../../redux/posts/post.reducer\";\r\n// 👍 💯 \"LOGGED_IN\" Person -> {User's information}, person that made this Discussion ->  So, details (text, image) came 👍 💯\r\nimport * as userReducer from \"../../../redux/users/userReducer\";\r\n\r\nlet PostDetails = () => {\r\n  let [comment, setComment] = useState({\r\n    text: \"\",\r\n  });\r\n\r\n  let dispatch = useDispatch();\r\n  //  // 🔬🔬🔬 \"postId\" ?  ->  b'z in 'App.js' we made navigation for  <PostDetails /> 👿 path=\"/posts/:postId\" 👿 for particular post 🔬🔬🔬\r\n  let postId = useParams().postId; // fetch particular 'Id' from url\r\n\r\n  let postInfo = useSelector((state) => {\r\n    return state[postReducer.postsFeatureKey];\r\n  });\r\n\r\n  let userInfo = useSelector((state) => {\r\n    return state[userReducer.userFeatureKey];\r\n  });\r\n\r\n  let { user } = userInfo;\r\n\r\n  let { loading, selectedPost } = postInfo;\r\n\r\n  //  //  👿👿 🔬 🔬 To display the discussion data here a/c to user's click on particular discussion button\r\n  //   we need to catch that discussion -> \"Id\" from 'url' and send them to the server and fetch a/c to that discussion-id -> details\r\n\r\n  useEffect(() => {\r\n    // dispatch an action to fetch a particular (single) postId details\r\n    dispatch(postActions.getPost(postId));\r\n  }, [postId]);\r\n\r\n  // submitCreateComment()\r\n  let submitCreateComment = (event) => {\r\n    event.preventDefault();\r\n    dispatch(postActions.createComment(comment, postId));\r\n    setComment({\r\n      text: \"\",\r\n    });\r\n  };\r\n\r\n  // updateComment()\r\n  let updateComment = (event) => {\r\n    setComment({\r\n      text: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Delete Comment\r\n  let clickDeleteComment = (commentId) => {\r\n    dispatch(postActions.deleteComment(postId, commentId)); //  \"postId\" and \"commentId\" we get from url\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <React.Fragment>\r\n          <section className=\"p-3\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <Link to=\"/posts/list\" className=\"btn bg-light-grey btn-sm\">\r\n                    Back\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  {Object.keys(selectedPost).length > 0 && (\r\n                    <div className=\"card\">\r\n                      <div className=\"card-body bg-light-grey\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col-md-2 text-center\">\r\n                            <img // belongs to the person who made the 'post'\r\n                              src={selectedPost.avatar}\r\n                              alt=\"\"\r\n                              className=\"rounded-circle\"\r\n                              height=\"70\"\r\n                              width=\"70\"\r\n                            />{\" \"}\r\n                            <br />\r\n                            <small>{selectedPost.name}</small>\r\n                          </div>\r\n                          <div className=\"col-md-8\">\r\n                            {/* 🖊️🖊️🖊️ who made the post -> image of the post (post ka image)  */}\r\n                            <div className=\"row mb-1\">\r\n                              <div className=\"col-md-6 m-auto d-block rounded img-thumbnail\">\r\n                                <img\r\n                                  src={selectedPost.image}\r\n                                  alt=\"\"\r\n                                  className=\"img-fluid\"\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <p>{selectedPost.text}</p> <br />\r\n                            <small>{selectedPost.createdAt}</small>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"row mt-3\">\r\n                          <div className=\"col\">\r\n                            {/*  👍 💯 Who is the person making this Discussion -> \"LOGGED_IN\" Person -> {User's information} So, below that's details (text, image) came 👍 💯  */}\r\n                            <form onSubmit={submitCreateComment}>\r\n                              {/*  Taking Input group */}\r\n                              <div className=\"input-group mb-1 \">\r\n                                <div className=\"input-group-prepend\">\r\n                                  {/*  placing profile picture -> who is logged-in (person)  */}\r\n                                  <span\r\n                                    className=\"input-group-text\"\r\n                                    id=\"basic-addon1\"\r\n                                  >\r\n                                    <img\r\n                                      src={user.avatar} // coming from \"loggedIn-person\" info -> userReducer\r\n                                      alt=\"\"\r\n                                      height=\"60\"\r\n                                      width=\"60\"\r\n                                      className=\"rounded-circle\"\r\n                                    />\r\n                                  </span>\r\n                                </div>\r\n                                <textarea\r\n                                  required\r\n                                  name=\"text\"\r\n                                  value={comment.text}\r\n                                  onChange={updateComment}\r\n                                  rows=\"3\"\r\n                                  className=\"form-control\"\r\n                                  placeholder=\"What's in your mind...\"\r\n                                />\r\n                              </div>\r\n                              <div>\r\n                                <input\r\n                                  type=\"submit\"\r\n                                  className=\"btn btn-teal btn-sm\"\r\n                                  value=\"Comment\"\r\n                                />\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          {/* here we're loop through the whole (list of) comments that is commented on the particular post */}\r\n          <section>\r\n            {/* ♻️ v.v.v...  We need to apply condition, if we've an object then */}\r\n            {/* ♻️ How to check object's length  &&  also length of any object that present inside object  */}\r\n            {Object.keys(selectedPost).length > 0 &&\r\n              selectedPost.comments.length > 0 && (\r\n                <div className=\"container\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      {selectedPost.comments.map((comment) => {\r\n                        return (\r\n                          <div className=\"card mt-3\" key={comment._id}>\r\n                            <div className=\"card-body\">\r\n                              {/* which person made the comment */}\r\n                              <div className=\"row\">\r\n                                <div className=\"col-md-2\">\r\n                                  <img\r\n                                    src={comment.avatar}\r\n                                    alt=\"\"\r\n                                    className=\"rounded-circle\"\r\n                                    width=\"60\"\r\n                                    height=\"60\"\r\n                                  />{\" \"}\r\n                                  <br />\r\n                                  <small>{comment.name}</small>\r\n                                </div>\r\n                                <div className=\"col-md-8\">\r\n                                  <p>{comment.text}</p>\r\n\r\n                                  {/*  Comment delete button only display -> when  'comment user_id'(any user can comment on any post) === 'loggedIn user_id'  */}\r\n                                  {/*  Every user can delete it's own post not other post  */}\r\n                                  {comment.user === user._id ? (\r\n                                    <button\r\n                                      className=\"btn rgba-red-light btn-sm\"\r\n                                      onClick={clickDeleteComment.bind(\r\n                                        this,\r\n                                        comment._id\r\n                                      )}\r\n                                    >\r\n                                      <i className=\"fa fa-times-circle\" />{\" \"}\r\n                                      Delete\r\n                                    </button>\r\n                                  ) : null}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n          </section>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PostDetails;\r\n","E:\\understand_project_code\\react-social\\client\\src\\redux\\users\\userReducer.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\developers\\developer.reducer.js",[],"E:\\understand_project_code\\react-social\\client\\src\\util\\userUtil.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\alert\\alert.reducer.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\developers\\developer.actions.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\profiles\\profile.action.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\alert\\alert.action.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\posts\\post.actions.js",[],"E:\\understand_project_code\\react-social\\client\\src\\util\\authUtil.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\posts\\post.reducer.js",[],"E:\\understand_project_code\\react-social\\client\\src\\redux\\profiles\\profile.reducer.js",[],"E:\\understand_project_code\\react-social\\client\\src\\layout\\misc\\spinner\\Spinner.js",[],{"ruleId":"144","severity":1,"message":"145","line":29,"column":6,"nodeType":"146","endLine":29,"endColumn":8,"suggestions":"147"},{"ruleId":"144","severity":1,"message":"145","line":25,"column":6,"nodeType":"146","endLine":25,"endColumn":8,"suggestions":"148"},{"ruleId":"144","severity":1,"message":"145","line":27,"column":6,"nodeType":"146","endLine":27,"endColumn":8,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":4,"column":8,"nodeType":"152","messageId":"153","endLine":4,"endColumn":15},{"ruleId":"150","severity":1,"message":"154","line":29,"column":7,"nodeType":"152","messageId":"153","endLine":29,"endColumn":18},{"ruleId":"144","severity":1,"message":"155","line":56,"column":6,"nodeType":"146","endLine":56,"endColumn":8,"suggestions":"156"},{"ruleId":"144","severity":1,"message":"157","line":84,"column":6,"nodeType":"146","endLine":84,"endColumn":8,"suggestions":"158"},{"ruleId":"144","severity":1,"message":"145","line":28,"column":6,"nodeType":"146","endLine":28,"endColumn":19,"suggestions":"159"},{"ruleId":"144","severity":1,"message":"145","line":35,"column":6,"nodeType":"146","endLine":35,"endColumn":8,"suggestions":"160"},{"ruleId":"144","severity":1,"message":"145","line":37,"column":6,"nodeType":"146","endLine":37,"endColumn":14,"suggestions":"161"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["162"],["163"],["164"],"no-unused-vars","'Spinner' is defined but never used.","Identifier","unusedVar","'profileInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'profile'. Either include them or remove the dependency array. You can also do a functional update 'setProfile(p => ...)' if you only need 'profile' in the 'setProfile' call.",["165"],"React Hook useEffect has missing dependencies: 'dispatch' and 'profile'. Either include them or remove the dependency array.",["166"],["167"],["168"],["169"],{"desc":"170","fix":"171"},{"desc":"170","fix":"172"},{"desc":"170","fix":"173"},{"desc":"174","fix":"175"},{"desc":"174","fix":"176"},{"desc":"177","fix":"178"},{"desc":"170","fix":"179"},{"desc":"180","fix":"181"},"Update the dependencies array to be: [dispatch]",{"range":"182","text":"183"},{"range":"184","text":"183"},{"range":"185","text":"183"},"Update the dependencies array to be: [dispatch, profile]",{"range":"186","text":"187"},{"range":"188","text":"187"},"Update the dependencies array to be: [developerId, dispatch]",{"range":"189","text":"190"},{"range":"191","text":"183"},"Update the dependencies array to be: [dispatch, postId]",{"range":"192","text":"193"},[1555,1557],"[dispatch]",[1194,1196],[1204,1206],[2436,2438],"[dispatch, profile]",[4192,4194],[1363,1376],"[developerId, dispatch]",[1385,1387],[1562,1570],"[dispatch, postId]"]